{"ast":null,"code":"import _defineProperty from \"/Users/coni/Desktop/cornershop-test/client/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport Axios from 'axios';\nconst apiEndpoint = '/api/v1/counter';\n\nconst getState = ({\n  getStore,\n  getActions,\n  setStore\n}) => {\n  return {\n    store: {\n      counters: [],\n      sort: {\n        column: '',\n        order: '',\n        active: false\n      },\n      query: '',\n      filter: {\n        type: '',\n        number: ''\n      }\n    },\n    actions: {\n      getCounters: async () => {\n        const response = await Axios.get(\"\".concat(apiEndpoint, \"s\"));\n        setStore({\n          counters: response.data\n        });\n      },\n      handleNewCounter: async title => {\n        if (title.trim() !== '') {\n          const store = getStore();\n          const newCounter = {\n            title,\n            count: 0\n          };\n          const counters = [...store.counters, newCounter];\n          setStore({\n            counters\n          });\n          const obj = {\n            title\n          };\n\n          const _ref = await Axios.post(apiEndpoint, obj),\n                counter = _ref.data;\n\n          console.log(counter);\n        }\n      },\n      handleAddition: item => {\n        const store = getStore();\n        const counters = [...store.counters];\n        const index = counters.indexOf(item);\n        counters[index] = _objectSpread({}, item);\n        counters[index].count += 1;\n        setStore({\n          counters\n        });\n      },\n      handleSubstraction: item => {\n        const store = getStore();\n        const counters = [...store.counters];\n        const index = counters.indexOf(item);\n        counters[index] = _objectSpread({}, item);\n        counters[index].count -= 1;\n        setStore({\n          counters\n        });\n      },\n      handleDelete: item => {\n        const store = getStore();\n        let counters = [...store.counters];\n        counters = counters.filter(c => c !== item);\n        console.log(counters);\n        setStore({\n          counters\n        });\n      },\n      handleSort: selectedColumn => {\n        const store = getStore();\n\n        let sort = _objectSpread({}, store.sort);\n\n        if (sort.column === selectedColumn) {\n          sort.order = sort.order === 'asc' ? 'desc' : 'asc';\n          sort.active = true;\n        } else {\n          sort.column = selectedColumn;\n          sort.order = 'asc';\n          sort.active = false;\n        }\n\n        setStore({\n          sort\n        });\n      },\n      handleSearch: query => {\n        if (query.trim() !== '') {\n          setStore({\n            query\n          });\n        } else {\n          setStore({\n            query: ''\n          });\n        }\n      },\n      handleFilter: (type, amount) => {\n        let number;\n\n        if (amount !== '') {\n          number = parseInt(amount);\n        } else {\n          number = '';\n        }\n\n        setStore({\n          filter: {\n            type,\n            number\n          }\n        });\n      }\n    }\n  };\n};\n\nexport default getState;","map":{"version":3,"sources":["/Users/coni/Desktop/cornershop-test/client/src/store/flux.js"],"names":["Axios","apiEndpoint","getState","getStore","getActions","setStore","store","counters","sort","column","order","active","query","filter","type","number","actions","getCounters","response","get","data","handleNewCounter","title","trim","newCounter","count","obj","post","counter","console","log","handleAddition","item","index","indexOf","handleSubstraction","handleDelete","c","handleSort","selectedColumn","handleSearch","handleFilter","amount","parseInt"],"mappings":"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","sourcesContent":["import Axios from 'axios';\n\nconst apiEndpoint = '/api/v1/counter';\n\nconst getState = ({ getStore, getActions, setStore }) => {\n\treturn {\n\t\tstore: {\n\t\t\tcounters: [],\n\t\t\tsort: {\n\t\t\t\tcolumn: '',\n\t\t\t\torder: '',\n\t\t\t\tactive: false\n\t\t\t},\n\t\t\tquery: '',\n\t\t\tfilter: {\n\t\t\t\ttype: '',\n\t\t\t\tnumber: ''\n\t\t\t}\n\t\t},\n\t\tactions: {\n\t\t\tgetCounters: async () => {\n\t\t\t\tconst response = await Axios.get(`${apiEndpoint}s`);\n\t\t\t\tsetStore({ counters: response.data });\n\t\t\t},\n\t\t\thandleNewCounter: async (title) => {\n\t\t\t\tif (title.trim() !== '') {\n\t\t\t\t\tconst store = getStore();\n\t\t\t\t\tconst newCounter = {\n\t\t\t\t\t\ttitle,\n\t\t\t\t\t\tcount: 0\n\t\t\t\t\t};\n\t\t\t\t\tconst counters = [ ...store.counters, newCounter ];\n\t\t\t\t\tsetStore({ counters });\n\n\t\t\t\t\tconst obj = { title };\n\t\t\t\t\tconst { data: counter } = await Axios.post(apiEndpoint, obj);\n\t\t\t\t\tconsole.log(counter);\n\t\t\t\t}\n\t\t\t},\n\t\t\thandleAddition: (item) => {\n\t\t\t\tconst store = getStore();\n\t\t\t\tconst counters = [ ...store.counters ];\n\t\t\t\tconst index = counters.indexOf(item);\n\t\t\t\tcounters[index] = { ...item };\n\t\t\t\tcounters[index].count += 1;\n\n\t\t\t\tsetStore({ counters });\n\t\t\t},\n\t\t\thandleSubstraction: (item) => {\n\t\t\t\tconst store = getStore();\n\t\t\t\tconst counters = [ ...store.counters ];\n\t\t\t\tconst index = counters.indexOf(item);\n\t\t\t\tcounters[index] = { ...item };\n\t\t\t\tcounters[index].count -= 1;\n\n\t\t\t\tsetStore({ counters });\n\t\t\t},\n\t\t\thandleDelete: (item) => {\n\t\t\t\tconst store = getStore();\n\t\t\t\tlet counters = [ ...store.counters ];\n\t\t\t\tcounters = counters.filter((c) => c !== item);\n\t\t\t\tconsole.log(counters);\n\t\t\t\tsetStore({ counters });\n\t\t\t},\n\t\t\thandleSort: (selectedColumn) => {\n\t\t\t\tconst store = getStore();\n\t\t\t\tlet sort = { ...store.sort };\n\n\t\t\t\tif (sort.column === selectedColumn) {\n\t\t\t\t\tsort.order = sort.order === 'asc' ? 'desc' : 'asc';\n\t\t\t\t\tsort.active = true;\n\t\t\t\t} else {\n\t\t\t\t\tsort.column = selectedColumn;\n\t\t\t\t\tsort.order = 'asc';\n\t\t\t\t\tsort.active = false;\n\t\t\t\t}\n\n\t\t\t\tsetStore({ sort });\n\t\t\t},\n\t\t\thandleSearch: (query) => {\n\t\t\t\tif (query.trim() !== '') {\n\t\t\t\t\tsetStore({ query });\n\t\t\t\t} else {\n\t\t\t\t\tsetStore({ query: '' });\n\t\t\t\t}\n\t\t\t},\n\t\t\thandleFilter: (type, amount) => {\n\t\t\t\tlet number;\n\t\t\t\tif (amount !== '') {\n\t\t\t\t\tnumber = parseInt(amount);\n\t\t\t\t} else {\n\t\t\t\t\tnumber = '';\n\t\t\t\t}\n\t\t\t\tsetStore({ filter: { type, number } });\n\t\t\t}\n\t\t}\n\t};\n};\n\nexport default getState;\n"]},"metadata":{},"sourceType":"module"}