{"ast":null,"code":"import _defineProperty from \"/Users/coni/Desktop/cornershop-test/client/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nconst getState = ({\n  getStore,\n  getActions,\n  setStore\n}) => {\n  return {\n    store: {\n      counters: [{\n        name: 'Dogs',\n        count: 0\n      }, {\n        name: 'Cats',\n        count: 0\n      }, {\n        name: 'Owls',\n        count: 0\n      }],\n      sort: {\n        column: '',\n        order: 'desc'\n      }\n    },\n    actions: {\n      handleNewCounter: name => {\n        const store = getStore();\n        const newCounter = {\n          name,\n          count: 0\n        };\n        const counters = [...store.counters, newCounter];\n        setStore({\n          counters\n        });\n      },\n      handleAddition: item => {\n        const store = getStore();\n        const counters = [...store.counters];\n        const index = counters.indexOf(item);\n        counters[index] = _objectSpread({}, item);\n        counters[index].count += 1;\n        setStore({\n          counters\n        });\n      },\n      handleSubstraction: item => {\n        const store = getStore();\n        const counters = [...store.counters];\n        const index = counters.indexOf(item);\n        counters[index] = _objectSpread({}, item);\n        counters[index].count -= 1;\n        setStore({\n          counters\n        });\n      },\n      handleDelete: item => {\n        const store = getStore();\n        let counters = [...store.counters];\n        counters = counters.filter(c => c !== item);\n        console.log(counters);\n        setStore({\n          counters\n        });\n      },\n\n      /* handleSelectedColumn = item => {\n      \tconst store = getStore();\n      \tstore.sort.column = item;\n      \t\n      \tsetStore({ sort })\n      \tconsole.log(store.sort);\n      }, */\n      handleSort: selectedColumn => {\n        const store = getStore();\n\n        let sort = _objectSpread({}, store.sort);\n\n        if (sort.column === selectedColumn) {\n          sort.order = sort.order === 'asc' ? 'desc' : 'asc';\n        } else {\n          sort.column = selectedColumn;\n          sort.order = 'asc';\n        }\n\n        setStore({\n          sort\n        });\n        console.log(sort);\n      }\n    }\n  };\n};\n\nexport default getState;","map":{"version":3,"sources":["/Users/coni/Desktop/cornershop-test/client/src/store/flux.js"],"names":["getState","getStore","getActions","setStore","store","counters","name","count","sort","column","order","actions","handleNewCounter","newCounter","handleAddition","item","index","indexOf","handleSubstraction","handleDelete","filter","c","console","log","handleSort","selectedColumn"],"mappings":";;;;;;AAAA,MAAMA,QAAQ,GAAG,CAAC;AAAEC,EAAAA,QAAF;AAAYC,EAAAA,UAAZ;AAAwBC,EAAAA;AAAxB,CAAD,KAAwC;AACxD,SAAO;AACNC,IAAAA,KAAK,EAAE;AACNC,MAAAA,QAAQ,EAAE,CAAE;AAAEC,QAAAA,IAAI,EAAE,MAAR;AAAgBC,QAAAA,KAAK,EAAE;AAAvB,OAAF,EAA8B;AAAED,QAAAA,IAAI,EAAE,MAAR;AAAgBC,QAAAA,KAAK,EAAE;AAAvB,OAA9B,EAA0D;AAAED,QAAAA,IAAI,EAAE,MAAR;AAAgBC,QAAAA,KAAK,EAAE;AAAvB,OAA1D,CADJ;AAENC,MAAAA,IAAI,EAAE;AACLC,QAAAA,MAAM,EAAE,EADH;AAELC,QAAAA,KAAK,EAAE;AAFF;AAFA,KADD;AAQNC,IAAAA,OAAO,EAAE;AACRC,MAAAA,gBAAgB,EAAGN,IAAD,IAAU;AAC3B,cAAMF,KAAK,GAAGH,QAAQ,EAAtB;AACA,cAAMY,UAAU,GAAG;AAClBP,UAAAA,IADkB;AAElBC,UAAAA,KAAK,EAAE;AAFW,SAAnB;AAIA,cAAMF,QAAQ,GAAG,CAAE,GAAGD,KAAK,CAACC,QAAX,EAAqBQ,UAArB,CAAjB;AACAV,QAAAA,QAAQ,CAAC;AAAEE,UAAAA;AAAF,SAAD,CAAR;AACA,OATO;AAURS,MAAAA,cAAc,EAAGC,IAAD,IAAU;AACzB,cAAMX,KAAK,GAAGH,QAAQ,EAAtB;AACA,cAAMI,QAAQ,GAAG,CAAE,GAAGD,KAAK,CAACC,QAAX,CAAjB;AACA,cAAMW,KAAK,GAAGX,QAAQ,CAACY,OAAT,CAAiBF,IAAjB,CAAd;AACAV,QAAAA,QAAQ,CAACW,KAAD,CAAR,qBAAuBD,IAAvB;AACAV,QAAAA,QAAQ,CAACW,KAAD,CAAR,CAAgBT,KAAhB,IAAyB,CAAzB;AAEAJ,QAAAA,QAAQ,CAAC;AAAEE,UAAAA;AAAF,SAAD,CAAR;AACA,OAlBO;AAmBRa,MAAAA,kBAAkB,EAAGH,IAAD,IAAU;AAC7B,cAAMX,KAAK,GAAGH,QAAQ,EAAtB;AACA,cAAMI,QAAQ,GAAG,CAAE,GAAGD,KAAK,CAACC,QAAX,CAAjB;AACA,cAAMW,KAAK,GAAGX,QAAQ,CAACY,OAAT,CAAiBF,IAAjB,CAAd;AACAV,QAAAA,QAAQ,CAACW,KAAD,CAAR,qBAAuBD,IAAvB;AACAV,QAAAA,QAAQ,CAACW,KAAD,CAAR,CAAgBT,KAAhB,IAAyB,CAAzB;AAEAJ,QAAAA,QAAQ,CAAC;AAAEE,UAAAA;AAAF,SAAD,CAAR;AACA,OA3BO;AA4BRc,MAAAA,YAAY,EAAGJ,IAAD,IAAU;AACvB,cAAMX,KAAK,GAAGH,QAAQ,EAAtB;AACA,YAAII,QAAQ,GAAG,CAAE,GAAGD,KAAK,CAACC,QAAX,CAAf;AACAA,QAAAA,QAAQ,GAAGA,QAAQ,CAACe,MAAT,CAAiBC,CAAD,IAAOA,CAAC,KAAKN,IAA7B,CAAX;AACAO,QAAAA,OAAO,CAACC,GAAR,CAAYlB,QAAZ;AACAF,QAAAA,QAAQ,CAAC;AAAEE,UAAAA;AAAF,SAAD,CAAR;AACA,OAlCO;;AAmCR;;;;;;;AAOAmB,MAAAA,UAAU,EAAGC,cAAD,IAAoB;AAC/B,cAAMrB,KAAK,GAAGH,QAAQ,EAAtB;;AACA,YAAIO,IAAI,qBAAQJ,KAAK,CAACI,IAAd,CAAR;;AAEA,YAAIA,IAAI,CAACC,MAAL,KAAgBgB,cAApB,EAAoC;AACnCjB,UAAAA,IAAI,CAACE,KAAL,GAAaF,IAAI,CAACE,KAAL,KAAe,KAAf,GAAuB,MAAvB,GAAgC,KAA7C;AACA,SAFD,MAEO;AACNF,UAAAA,IAAI,CAACC,MAAL,GAAcgB,cAAd;AACAjB,UAAAA,IAAI,CAACE,KAAL,GAAa,KAAb;AACA;;AAEDP,QAAAA,QAAQ,CAAC;AAAEK,UAAAA;AAAF,SAAD,CAAR;AAEAc,QAAAA,OAAO,CAACC,GAAR,CAAYf,IAAZ;AACA;AAxDO;AARH,GAAP;AAmEA,CApED;;AAsEA,eAAeR,QAAf","sourcesContent":["const getState = ({ getStore, getActions, setStore }) => {\n\treturn {\n\t\tstore: {\n\t\t\tcounters: [ { name: 'Dogs', count: 0 }, { name: 'Cats', count: 0 }, { name: 'Owls', count: 0 } ],\n\t\t\tsort: {\n\t\t\t\tcolumn: '',\n\t\t\t\torder: 'desc'\n\t\t\t}\n\t\t},\n\t\tactions: {\n\t\t\thandleNewCounter: (name) => {\n\t\t\t\tconst store = getStore();\n\t\t\t\tconst newCounter = {\n\t\t\t\t\tname,\n\t\t\t\t\tcount: 0\n\t\t\t\t};\n\t\t\t\tconst counters = [ ...store.counters, newCounter ];\n\t\t\t\tsetStore({ counters });\n\t\t\t},\n\t\t\thandleAddition: (item) => {\n\t\t\t\tconst store = getStore();\n\t\t\t\tconst counters = [ ...store.counters ];\n\t\t\t\tconst index = counters.indexOf(item);\n\t\t\t\tcounters[index] = { ...item };\n\t\t\t\tcounters[index].count += 1;\n\n\t\t\t\tsetStore({ counters });\n\t\t\t},\n\t\t\thandleSubstraction: (item) => {\n\t\t\t\tconst store = getStore();\n\t\t\t\tconst counters = [ ...store.counters ];\n\t\t\t\tconst index = counters.indexOf(item);\n\t\t\t\tcounters[index] = { ...item };\n\t\t\t\tcounters[index].count -= 1;\n\n\t\t\t\tsetStore({ counters });\n\t\t\t},\n\t\t\thandleDelete: (item) => {\n\t\t\t\tconst store = getStore();\n\t\t\t\tlet counters = [ ...store.counters ];\n\t\t\t\tcounters = counters.filter((c) => c !== item);\n\t\t\t\tconsole.log(counters);\n\t\t\t\tsetStore({ counters });\n\t\t\t},\n\t\t\t/* handleSelectedColumn = item => {\n\t\t\t\tconst store = getStore();\n\t\t\t\tstore.sort.column = item;\n\t\t\t\t\n\t\t\t\tsetStore({ sort })\n\t\t\t\tconsole.log(store.sort);\n\t\t\t}, */\n\t\t\thandleSort: (selectedColumn) => {\n\t\t\t\tconst store = getStore();\n\t\t\t\tlet sort = { ...store.sort };\n\n\t\t\t\tif (sort.column === selectedColumn) {\n\t\t\t\t\tsort.order = sort.order === 'asc' ? 'desc' : 'asc';\n\t\t\t\t} else {\n\t\t\t\t\tsort.column = selectedColumn;\n\t\t\t\t\tsort.order = 'asc';\n\t\t\t\t}\n\n\t\t\t\tsetStore({ sort });\n\n\t\t\t\tconsole.log(sort);\n\t\t\t}\n\t\t}\n\t};\n};\n\nexport default getState;\n"]},"metadata":{},"sourceType":"module"}