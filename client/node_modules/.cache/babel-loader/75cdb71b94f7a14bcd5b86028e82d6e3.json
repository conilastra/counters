{"ast":null,"code":"import _defineProperty from \"/Users/coni/Desktop/cornershop-test/client/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nconst getState = ({\n  getStore,\n  getActions,\n  setStore\n}) => {\n  return {\n    store: {\n      counters: [{\n        name: 'Dogs',\n        count: 0\n      }, {\n        name: 'Cats',\n        count: 0\n      }, {\n        name: 'Owls',\n        count: 0\n      }],\n      sort: {\n        column: '',\n        order: '',\n        active: false\n      },\n      query: '',\n      filter: {\n        type: '',\n        number: NaN\n      }\n    },\n    actions: {\n      handleNewCounter: name => {\n        if (name.trim() !== '') {\n          const store = getStore();\n          const newCounter = {\n            name,\n            count: 0\n          };\n          const counters = [...store.counters, newCounter];\n          setStore({\n            counters\n          });\n        }\n      },\n      handleAddition: item => {\n        const store = getStore();\n        const counters = [...store.counters];\n        const index = counters.indexOf(item);\n        counters[index] = _objectSpread({}, item);\n        counters[index].count += 1;\n        setStore({\n          counters\n        });\n      },\n      handleSubstraction: item => {\n        const store = getStore();\n        const counters = [...store.counters];\n        const index = counters.indexOf(item);\n        counters[index] = _objectSpread({}, item);\n        counters[index].count -= 1;\n        setStore({\n          counters\n        });\n      },\n      handleDelete: item => {\n        const store = getStore();\n        let counters = [...store.counters];\n        counters = counters.filter(c => c !== item);\n        console.log(counters);\n        setStore({\n          counters\n        });\n      },\n      handleSort: selectedColumn => {\n        const store = getStore();\n\n        let sort = _objectSpread({}, store.sort);\n\n        if (sort.column === selectedColumn) {\n          sort.order = sort.order === 'asc' ? 'desc' : 'asc';\n          sort.active = true;\n        } else {\n          sort.column = selectedColumn;\n          sort.order = 'asc';\n          sort.active = false;\n        }\n\n        setStore({\n          sort\n        });\n      },\n      handleSearch: query => {\n        if (query.trim() !== '') {\n          setStore({\n            query\n          });\n        }\n      },\n      handleFilter: (type, number) => {\n        if (type === 'less') {\n          setStore({\n            filter: type,\n            number: parseInt(number)\n          });\n        }\n      }\n    }\n  };\n};\n\nexport default getState;","map":{"version":3,"sources":["/Users/coni/Desktop/cornershop-test/client/src/store/flux.js"],"names":["getState","getStore","getActions","setStore","store","counters","name","count","sort","column","order","active","query","filter","type","number","NaN","actions","handleNewCounter","trim","newCounter","handleAddition","item","index","indexOf","handleSubstraction","handleDelete","c","console","log","handleSort","selectedColumn","handleSearch","handleFilter","parseInt"],"mappings":"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","sourcesContent":["const getState = ({ getStore, getActions, setStore }) => {\n\treturn {\n\t\tstore: {\n\t\t\tcounters: [ { name: 'Dogs', count: 0 }, { name: 'Cats', count: 0 }, { name: 'Owls', count: 0 } ],\n\t\t\tsort: {\n\t\t\t\tcolumn: '',\n\t\t\t\torder: '',\n\t\t\t\tactive: false\n\t\t\t},\n\t\t\tquery: '',\n\t\t\tfilter: {\n\t\t\t\ttype: '',\n\t\t\t\tnumber: NaN\n\t\t\t}\n\t\t},\n\t\tactions: {\n\t\t\thandleNewCounter: (name) => {\n\t\t\t\tif (name.trim() !== '') {\n\t\t\t\t\tconst store = getStore();\n\t\t\t\t\tconst newCounter = {\n\t\t\t\t\t\tname,\n\t\t\t\t\t\tcount: 0\n\t\t\t\t\t};\n\t\t\t\t\tconst counters = [ ...store.counters, newCounter ];\n\t\t\t\t\tsetStore({ counters });\n\t\t\t\t}\n\t\t\t},\n\t\t\thandleAddition: (item) => {\n\t\t\t\tconst store = getStore();\n\t\t\t\tconst counters = [ ...store.counters ];\n\t\t\t\tconst index = counters.indexOf(item);\n\t\t\t\tcounters[index] = { ...item };\n\t\t\t\tcounters[index].count += 1;\n\n\t\t\t\tsetStore({ counters });\n\t\t\t},\n\t\t\thandleSubstraction: (item) => {\n\t\t\t\tconst store = getStore();\n\t\t\t\tconst counters = [ ...store.counters ];\n\t\t\t\tconst index = counters.indexOf(item);\n\t\t\t\tcounters[index] = { ...item };\n\t\t\t\tcounters[index].count -= 1;\n\n\t\t\t\tsetStore({ counters });\n\t\t\t},\n\t\t\thandleDelete: (item) => {\n\t\t\t\tconst store = getStore();\n\t\t\t\tlet counters = [ ...store.counters ];\n\t\t\t\tcounters = counters.filter((c) => c !== item);\n\t\t\t\tconsole.log(counters);\n\t\t\t\tsetStore({ counters });\n\t\t\t},\n\t\t\thandleSort: (selectedColumn) => {\n\t\t\t\tconst store = getStore();\n\t\t\t\tlet sort = { ...store.sort };\n\n\t\t\t\tif (sort.column === selectedColumn) {\n\t\t\t\t\tsort.order = sort.order === 'asc' ? 'desc' : 'asc';\n\t\t\t\t\tsort.active = true;\n\t\t\t\t} else {\n\t\t\t\t\tsort.column = selectedColumn;\n\t\t\t\t\tsort.order = 'asc';\n\t\t\t\t\tsort.active = false;\n\t\t\t\t}\n\n\t\t\t\tsetStore({ sort });\n\t\t\t},\n\t\t\thandleSearch: (query) => {\n\t\t\t\tif (query.trim() !== '') {\n\t\t\t\t\tsetStore({ query });\n\t\t\t\t}\n\t\t\t},\n\t\t\thandleFilter: (type, number) => {\n\t\t\t\tif (type === 'less') {\n\t\t\t\t\tsetStore({ filter: type, number: parseInt(number) });\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n};\n\nexport default getState;\n"]},"metadata":{},"sourceType":"module"}